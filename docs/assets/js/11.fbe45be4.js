(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{370:function(t,a,s){"use strict";s.r(a);var n=s(44),r=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"数据结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构"}},[t._v("#")]),t._v(" 数据结构")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"数据结构概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据结构概念"}},[t._v("#")]),t._v(" 数据结构概念")]),t._v(" "),s("p",[t._v("抽象数据类型：abstract data type")]),t._v(" "),s("p",[t._v("数据：可观事物的符号表示\n数据类型：数据值的集合 + 集合上的操作")]),t._v(" "),s("p",[t._v("抽象：")]),t._v(" "),s("ul",[s("li",[t._v("与存放的机器无关")]),t._v(" "),s("li",[t._v("与数据存储的物理结构无关")]),t._v(" "),s("li",[t._v("与实现的操作的算法和实现的语言无关")])]),t._v(" "),s("p",[s("strong",[t._v("数据结构 = 逻辑结构(线性表，树， 图) + 物理储存结构（数组 ，链表）+ 操作(算法)")]),t._v(".")]),t._v(" "),s("div",{staticClass:"language-mermaid extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("graph TB;\n　　逻辑结构 --\x3e 线性结构;\n    线性结构 --\x3e  一般线性表 ;\n    线性结构 --\x3e 受限线性表 ;\n    受限线性表 --\x3e 栈;\n     受限线性表 --\x3e 队列;\n\n\n    逻辑结构 --\x3e 非线性结构;\n    非线性结构 --\x3e 树结构;\n    树结构 --\x3e 树;\n    树结构 --\x3e 二叉树;\n    非线性结构 --\x3e 图结构;\n    图结构 --\x3e 有向图;\n    图结构 --\x3e 无向图;\n")])])]),s("div",{staticClass:"language-mermaid extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("graph TB;\n\nA[物理存储结构]--\x3eB[顺序存储]\nA[物理存储结构]--\x3eC[链式存储]\nA[物理存储结构]--\x3eD[索引]\nA[物理存储结构]--\x3eE[散列-hash]\n\n")])])]),s("p",[t._v("算法：Algorithm 为了解决某类问题而规定的一个有限长的操作序列\n算法的五个特征：")]),t._v(" "),s("ol",[s("li",[t._v("有穷性   执行有穷步后，在有穷的时间内得到结果")]),t._v(" "),s("li",[t._v("确定性   每种情况下所执行的操作，在算法中有明确的规定，不会产生二义性")]),t._v(" "),s("li",[t._v("可行性    算法中的所有操作都可以通过已经实现的基本操作运算执行有限次来实现")]),t._v(" "),s("li",[t._v("输入   有0个或多个输入")]),t._v(" "),s("li",[t._v("输出   有一个或多个输出")])]),t._v(" "),s("p",[t._v("算法分析：")]),t._v(" "),s("ol",[s("li",[t._v("时间复杂度： O渐进上界   0 < T(n) < O(n)   Ω渐进下界  θ渐进确界")]),t._v(" "),s("li",[t._v("空间复杂度：   .")])]),t._v(" "),s("h2",{attrs:{id:"线性表"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#线性表"}},[t._v("#")]),t._v(" 线性表")]),t._v(" "),s("p",[t._v("线性结构的基本特点是除第一个元素无直接前驱，最后一个元素无直接后继之外，其他每个数据元素都有一个前驱和后继。")]),t._v(" "),s("p",[t._v("线性表的操作：")]),t._v(" "),s("ol",[s("li",[t._v("InitList(L) 初始化一个空的线性表")]),t._v(" "),s("li",[t._v("locateElem(L,e) 按值查找 ，返回e在线性表中的位置")]),t._v(" "),s("li",[t._v("getElem(L,K)  按位查找 ，返回index=k位置上的元素")]),t._v(" "),s("li",[t._v("Insert(L,i,e) 在指定位置i上插入一个元素")]),t._v(" "),s("li",[t._v("delete(L,i)  删除指定位置上的元素")]),t._v(" "),s("li",[t._v("Length(L)  返回线性表的长度")])]),t._v(" "),s("p",[t._v("线性表的两种实现：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("数组实现：\n按位查找速度快，直接计算地址\n插入到i位置， i后面的元素需要向后移动，操作慢。删除同理")])]),t._v(" "),s("li",[s("p",[t._v("链表实现\n按位查找需要指针移动i次，速度慢\n插入，删除，找到对应位置的前一项，改变指针指向，操作快。查找耗时。")])])]),t._v(" "),s("h3",{attrs:{id:"栈"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#栈"}},[t._v("#")]),t._v(" 栈")]),t._v(" "),s("p",[t._v("栈是一种操作受限的线性表。只能在栈顶进行操作。")]),t._v(" "),s("p",[t._v("栈的操作：\n入栈  把一个元素放在栈顶\n出栈  从栈顶弹出一个元素")]),t._v(" "),s("p",[t._v("栈的实现\n数组实现:栈顶放在数组的末尾，插入，删除操作方便\n链表实现：栈顶设置为链表的表头 ，插入，删除操作方便")]),t._v(" "),s("h3",{attrs:{id:"队列"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#队列"}},[t._v("#")]),t._v(" 队列")]),t._v(" "),s("p",[t._v("队列是两端操作受限的线性表，只能在队列头出队，队列尾入队。\n队列的操作\n入队:EnQueue（Q,e）  将e加入队尾\n出队:DeQueue(Q,p)   堆头元素删除，返回值为p\n判空:Empty(Q)      队头和队尾相遇为空\n队列的实现\n数组实现：环形队列  头尾指针\n链表实现：头尾指针 ，头指针做出队 ，尾位置做入队")]),t._v(" "),s("h2",{attrs:{id:"树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树"}},[t._v("#")]),t._v(" 树")]),t._v(" "),s("h3",{attrs:{id:"树的概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树的概念"}},[t._v("#")]),t._v(" 树的概念")]),t._v(" "),s("h3",{attrs:{id:"二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树"}},[t._v("#")]),t._v(" 二叉树")]),t._v(" "),s("p",[t._v("二叉树: n个节点的有限集合")]),t._v(" "),s("ol",[s("li",[t._v("可以为空二叉树")]),t._v(" "),s("li",[t._v("根节点和左右子树，左右子树也是二叉树，递归定义。")])]),t._v(" "),s("div",{staticClass:"language-mermaid extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("graph TB;\nA((T))---B((L));\nA((T))---C((R));\n\n")])])]),s("p",[t._v("二叉树的遍历：前中后续遍历，根节点的相对位置")]),t._v(" "),s("p",[s("strong",[t._v("二叉树遍历的核心问题 ：二维结构的线性化")])]),t._v(" "),s("blockquote",[s("p",[t._v("需要解决：\n1. 从节点访问左右儿子节点\n2. 访问左儿子之后，右儿子怎么办 ==> 需要借助数据结构来记忆 ==> 可选的结构: 堆栈(前 中 后)   队列（层）")])]),t._v(" "),s("ul",[s("li",[t._v("前序遍历：输出 T->L->R  根 左 右")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("递归实现：\nvoid preOrder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BineryTree T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    if"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("NULL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        visit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("             //访问根节点\n        preOrder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T-"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("lchild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  //访问左子树\n        preOrder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T-"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("rchild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  // 访问右子树\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n非递归实现:第一次遇到 ，print 出来为先序遍历\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 遇到节点 ，print ，压入栈 ，遍历左子树\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 左子树遍历完毕后，从栈顶弹出一个节点，并访问他\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". 按其右指针中序遍历改节点的右子树\n\nvoid inOrder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinaryTree BT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    BineryTree T "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BT   //指针\n    Stack s  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" createStack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  //创建堆栈\n    while"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("IsEmpty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   //节点不为空，栈不空\n        while"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("          //遇到节点压栈，循环遍历左子树\n            visit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("      //**print 的顺序，第一次遇到就print为先序 **\n            Push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s,T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            T "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" T-"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("lchild\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        if"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("IsEmpty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            // 栈不为空\n            T "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Top"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   //弹出节点 并访问\n            T "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" T -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" rchild  // 按右指针做中序遍历\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n")])])]),s("ul",[s("li",[t._v("中序遍历：输出 L->T->R  左 中 右")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("递归实现：\nvoid inOrder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BineryTree T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    if"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("NULL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        midOrder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T-"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("lchild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  // 访问左子树\n        visit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("             // 访问根节点\n        midOrder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T-rchild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   // 访问右子树\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n非递归实现：  第二次遇到节点 ，print出来为中序\n\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 遇到节点 ，先压入栈 ，遍历左子树\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 左子树遍历完毕后，从栈顶弹出一个节点，并访问他\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". 按其右指针中序遍历改节点的右子树\n\nvoid inOrder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BinaryTree BT"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    BineryTree T "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" BT   //指针\n    Stack s  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" createStack"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  //创建堆栈\n    while"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("IsEmpty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   //节点不为空，栈不空\n        while"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("          //遇到节点压栈，循环遍历左子树\n            Push"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s,T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            T "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" T-"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("lchild\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        if"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("IsEmpty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            // 栈不为空\n            T "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Top"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   //弹出节点 并访问\n            visit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     //**print 的顺序，第二次遇到就print为中序 **\n            T "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" T -"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" rchild  // 按右指针做中序遍历\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("ul",[s("li",[t._v("后续遍历：输出 L->R->T  右 左 中")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("\n递归实现：\nvoid postOrder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BineryTree T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    if"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("NUll"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        postOrder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T-lchild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  //访问左子树\n        postOrder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T-"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("rchild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  // 访问右子树\n        visit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("             // 输出根节点\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("ul",[s("li",[t._v("按层遍历：自上到下 自左到右遍历")])]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("使用队列实现：\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 根节点入队\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 从队列中取出一个元素\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". 访问元素，\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(". 左右儿子非空加入队列\n"),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("。循环2,3，4\n\nvoid leverOrder"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("BineryTree T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    InitQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   // 初始化队列\n    EnQueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q,T"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  // 根节点入队\n    BineryTree p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" // 创建一个指针\n    while"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Empty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n             // 队列不为空，循环执行\n        Dequeue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q,p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   //出队\n        visit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("     // 访问\n        if"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p-"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("lchild"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("NULL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            Enqueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q,p-lchild"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  // 左子树不空，入队\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        if"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p-rchild"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v("NULL"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            Enqueue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Q,p-rchlid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  // 右子树不空，入队\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h3",{attrs:{id:"二叉搜索树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉搜索树"}},[t._v("#")]),t._v(" 二叉搜索树")]),t._v(" "),s("h3",{attrs:{id:"平衡二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平衡二叉树"}},[t._v("#")]),t._v(" 平衡二叉树")]),t._v(" "),s("ul",[s("li",[t._v("RR旋转")]),t._v(" "),s("li",[t._v("LL旋转")]),t._v(" "),s("li",[t._v("LR旋转")]),t._v(" "),s("li",[t._v("RL旋转")])]),t._v(" "),s("h3",{attrs:{id:"堆-heap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#堆-heap"}},[t._v("#")]),t._v(" 堆（heap）")]),t._v(" "),s("p",[t._v("可以用来实现优先队列\n插入\n删除")]),t._v(" "),s("h3",{attrs:{id:"哈夫曼树-可以用来做编码的压缩"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈夫曼树-可以用来做编码的压缩"}},[t._v("#")]),t._v(" 哈夫曼树（可以用来做编码的压缩）")]),t._v(" "),s("p",[t._v("构造:每次把权值最小的两个二叉树合并 ，借助最小堆实现")]),t._v(" "),s("h2",{attrs:{id:"图-多对多的关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#图-多对多的关系"}},[t._v("#")]),t._v(" 图  多对多的关系")]),t._v(" "),s("p",[t._v("G(V,E)\n最短路径问题\n最小生成树问题")]),t._v(" "),s("p",[t._v("图的表示")]),t._v(" "),s("ol",[s("li",[t._v("邻接矩阵")])]),t._v(" "),s("p",[t._v("G[i][j] = 1 or 0  . <Vi,vj> 存在边 1\n使用一维数组 ，压缩一半  原先的G[i][j] = A[i*(i+1)/2 + j]")]),t._v(" "),s("ol",{attrs:{start:"2"}},[s("li",[t._v("邻接表")])]),t._v(" "),s("p",[t._v("图的遍历\nBFS(breadth first search) 广度优先  (层序遍历，队列)\nDFS（depth first search） 深度优先 （先序遍历，堆栈）")])])}),[],!1,null,null,null);a.default=r.exports}}]);